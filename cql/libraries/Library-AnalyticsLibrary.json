{
  "content": [
    {
      "contentType": "text/cql",
      "data": "/*
  This CQL Library is used to aggregate data that can be used for CQL Analytics
*/

library AnalyticsLibrary version '1.0.0'

using FHIR version '4.0.1'

// Libraries that we will perform analytics on
include DashboardLibrary version '1.0.0' called Dash
include CollateManagementData version '1.1.0' called CDM
include ManageCommonAbnormality version '1.1.0' called MCA
include ManagementLibrary version '1.0.0' called Management
include ManageRareAbnormality version '1.1.0' called MRA
include ManageSpecialPopulation version '1.1.0' called MSP
include ScreeningLibrary version '1.0.0' called Screening
include ScreeningAverageRiskLibrary version '1.0.0' called SAR
include ScreeningDesExposureLibrary version '1.0.0' called SDE
include ScreeningImmunocompromisedLibrary version '1.0.0' called SIC
include ScreeningSymptomaticLibrary version '1.0.0' called SSL

//------------------------------------------------------------------------------
// PARAMETERS
//------------------------------------------------------------------------------
parameter Analytics default true // Turn analytics generation on or off.

context Patient

//------------------------------------------------------------------------------
// Analytics Data Elements from Libraries
//------------------------------------------------------------------------------
define CollateManagementDataAnalytics:
{
  MostRecentHpvResult: CDM.MostRecentHpvResult,
  SecondMostRecentHpvResult: CDM.SecondMostRecentHpvResult,
  ThirdMostRecentHpvResult: CDM.ThirdMostRecentHpvResult,
  FourthMostRecentHpvResult: CDM.FourthMostRecentHpvResult,
  MostRecentCytologyCotestResult: CDM.MostRecentCytologyCotestResult,
  SecondMostRecentCytologyCotestResult: CDM.SecondMostRecentCytologyCotestResult,
  ThirdMostRecentCytologyCotestResult: CDM.ThirdMostRecentCytologyCotestResult,
  FourthMostRecentCytologyCotestResult: CDM.FourthMostRecentCytologyCotestResult,
  MostRecentCytologyReportWasWithinPastFiveYears: CDM.MostRecentCytologyReportWasWithinPastFiveYears,
  CytologyInterpretedAsAscusOrAbove: CDM.CytologyInterpretedAsAscusOrAbove,
  AnyCytologyInterpretedAsAscusOrAbove: CDM.AnyCytologyInterpretedAsAscusOrAbove,
  MostRecentBiopsyResult: CDM.MostRecentBiopsyResult,
  MostRecentBiopsyReportDate: ToString(CDM.MostRecentBiopsyReportDate),
  ReferringHpvResult: CDM.ReferringHpvResult,
  MostRecentCytologyBeforeBiopsy: CDM.MostRecentCytologyBeforeBiopsy,
  ReferringCytologyResult: CDM.ReferringCytologyResult,
  DateOfLastCervicalPrecancerTreatment: ToString(CDM.DateOfLastCervicalPrecancerTreatment),
  MostRecentCytologyReportDate: ToString(CDM.MostRecentCytologyReportDate)
}

define DashboardLibraryAnalytics:
{
  PatientAge: Dash.PatientAge,
  TransgenderMale: Dash.TransgenderMale,
  HasRecentPositiveHpv: Dash.HasRecentPositiveHpv,
  HasRecentAbnormalCytologyResults: Dash.HasRecentAbnormalCytologyResults,
  HasRecentRareCytologyResults: Dash.HasRecentRareCytologyResults,
  HasRecentAbnormalScreening: Dash.HasRecentAbnormalScreening,
  HasRecentAbnormalHistology: Dash.HasRecentAbnormalHistology,
  Immunocompromised: Dash.Immunocompromised,
  MostRecentDistinctImmunocompromisedEvent: Dash.MostRecentDistinctImmunocompromisedEvent,
  MostRecentDistinctImmunocompromisedEventDate: ToString(Dash.MostRecentDistinctImmunocompromisedEventDate)
}

define ManageCommonAbnormalityAnalytics:
{
  HpvDates: MCA.HpvDates H return ToString(H),
  CytologyAloneInRecentHistory: MCA.CytologyAloneInRecentHistory,
  AbnormalCytologyAloneInRecentHistory: MCA.AbnormalCytologyAloneInRecentHistory,
  RarelyScreenedTreatmentRecommendation: MCA.RarelyScreenedTreatmentRecommendation,
  TableRecommendation: MCA.TableRecommendation,
  WhichTableMadeTheRecommendation: MCA.WhichTableMadeTheRecommendation,
  MostRecentCytologyIsNotACotest: MCA.MostRecentCytologyIsNotACotest,
  HpvInterpretedAsPositive: MCA.HpvInterpretedAsPositive,
  SecondMostRecentHpvInterpretedAsPositive: MCA.SecondMostRecentHpvInterpretedAsPositive,
  DateOfMostRecentPositiveScreeningResult: ToString(MCA.DateOfMostRecentPositiveScreeningResult),
  DateOfMostRecentHpvReport: ToString(MCA.DateOfMostRecentHpvReport),
  PositivePrimaryHpv: MCA.PositivePrimaryHpv,
  HighRiskHPVPositiveResults: MCA.HighRiskHPVPositiveResults,
  PreviousCytologyOrSurveillanceIsOldOrAbsent: MCA.PreviousCytologyOrSurveillanceIsOldOrAbsent,
  IsRarelyScreenedPatient: MCA.IsRarelyScreenedPatient,
  RelevantRow: MCA.RelevantRow
}

define ManagementLibraryAnalytics:
{
  HasHighGradePreCancerCervicalLesion: Management.HasHighGradePreCancerCervicalLesion,
  HasCervicalCancerDiagnoses: Management.HasCervicalCancerDiagnoses,
  WhichRarityMadeTheRecommendation: Management.WhichRarityMadeTheRecommendation,
  ManagementRecommendation: Management.ManagementRecommendation,
  HasRecommendation: Management.HasRecommendation,
  DecisionAids: Management.DecisionAids
}

define ManageRareAbnormalityAnalytics:
{
  HasPositiveHpvAfterTreatmentForHighGradeResult: MRA.HasPositiveHpvAfterTreatmentForHighGradeResult,
  HasPremenopausalObservationOrCondition: MRA.HasPremenopausalObservationOrCondition,
  HasPostmenopausalObservationOrCondition: MRA.HasPostmenopausalObservationOrCondition,
  AbsenceOrRemovalOfCervix: MRA.AbsenceOrRemovalOfCervix,
  CervixRemovalDate: ToString(MRA.CervixRemovalDate),
  HasColposcopyProcedureAfterMostRecentBiopsy: MRA.HasColposcopyProcedureAfterMostRecentBiopsy,
  HasColposcopyProcedureAfterMostRecentTreatment: MRA.HasColposcopyProcedureAfterMostRecentTreatment,
  RecentlyRespondedYesToFuturePregnancyConcernsQuestion: MRA.RecentlyRespondedYesToFuturePregnancyConcernsQuestion,
  MostRecentTreatmentDate: ToString(MRA.MostRecentTreatmentDate),
  HasTreatmentInLastYear: MRA.HasTreatmentInLastYear,
  HasTreatmentAfterMostRecentBiopsy: MRA.HasTreatmentAfterMostRecentBiopsy,
  HasSurveillanceAfterMostRecentBiopsy: MRA.HasSurveillanceAfterMostRecentBiopsy,
  HasPositiveSurveillanceAfterMostRecentBiopsy: MRA.HasPositiveSurveillanceAfterMostRecentBiopsy,
  HasHistologicHsilWithin12MonthsBeforeTreatment: MRA.HasHistologicHsilWithin12MonthsBeforeTreatment,
  HasTreatmentForHighGradeHistologyOrCytology: MRA.HasTreatmentForHighGradeHistologyOrCytology,
  TreatmentForHighGradeHistologyOrCytologyDate: ToString(MRA.TreatmentForHighGradeHistologyOrCytologyDate),
  HasFirstNegativeSurveillanceTestAfterMostRecentBiopsy: MRA.HasFirstNegativeSurveillanceTestAfterMostRecentBiopsy,
  HasHistologyAfterTreatmentForHighGradeResult: MRA.HasHistologyAfterTreatmentForHighGradeResult,
  WhichRarityMadeTheRecommendation: MRA.WhichRarityMadeTheRecommendation
}
define ManageSpecialPopulationAnalytics:
{
  BiopsySinceMostRecentCytology: MSP.BiopsySinceMostRecentCytology,
  PregnancyOnset: MSP.PregnancyOnset,
  HistologicAisDuringPregnancy: MSP.HistologicAisDuringPregnancy,
  TwoMostRecentCytologyReportsWithin18MonthsApart: MSP.TwoMostRecentCytologyReportsWithin18MonthsApart,
  HighGradePreCancerCervicalLesionDate: ToString(MSP.HighGradePreCancerCervicalLesionDate.date),
  CervicalCancerDiagnosisDate: ToString(MSP.CervicalCancerDiagnosisDate.date),
  HighGradeOrCancerHistologyResultsDate: ToString(MSP.HighGradeOrCancerHistologyResultsDate.date),
  HysterectomyPerformedForTreatment: MSP.HysterectomyPerformedForTreatment,
  InitialIntensiveSurveillancePeriodPostHysterectomy: MSP.InitialIntensiveSurveillancePeriodPostHysterectomy,
  WhichPopulationMadeTheRecommendation: MSP.WhichPopulationMadeTheRecommendation
}

define ScreeningLibraryAnalytics:
{
  HasHighGradePreCancerCervicalLesion: Screening.HasHighGradePreCancerCervicalLesion,
  HasCervicalCancerDiagnoses: Screening.HasCervicalCancerDiagnoses,
  HasRecentAbnormalScreening: Screening.HasRecentAbnormalScreening,
  HasRecentAbnormalHistology: Screening.HasRecentAbnormalHistology,
  IsIncludedAndNotExcluded: Screening.IsIncludedAndNotExcluded,
  HasRecommendation: Screening.HasRecommendation,
  SuggestedOrders: Screening.SuggestedOrders,
  DecisionAids: Screening.DecisionAids
}

define ScreeningAverageRiskLibraryAnalytics:
{
  DateOfMostRecentNilmCytology: ToString(SAR.DateOfMostRecentNilmCytology),
  DateOfMostRecentNegativeHpv: ToString(SAR.DateOfMostRecentNegativeHpv),
  DateOfMostRecentNegativeCotest: ToString(SAR.DateOfMostRecentNegativeCotest),
  LastScreeningType: SAR.LastScreeningType,
  ProposedScreeningDate: ToString(SAR.ProposedScreeningDate),
  RecommendImmediateCervicalCytology: SAR.RecommendImmediateCervicalCytology,
  RecommendImmediatePrimaryHpv: SAR.RecommendImmediatePrimaryHpv,
  RecommendImmediateCotesting: SAR.RecommendImmediateCotesting,
  AbnormalResultInRecord: SAR.AbnormalResultInRecord,
  AbsenceOrRemovalOfCervix: SAR.AbsenceOrRemovalOfCervix,
  AbsenceOrRemovalOfCervixWithoutHistoryOfHighGradePrecancerOrCancer: SAR.AbsenceOrRemovalOfCervixWithoutHistoryOfHighGradePrecancerOrCancer,
  AdequatelyScreened: SAR.AdequatelyScreened,
  HasTwoNegativeHpvTestsForGradeD: SAR.HasTwoNegativeHpvTestsForGradeD
}

define ScreeningDesExposureLibraryAnalytics:
{
  WasExposedToDesInUtero: SDE.WasExposedToDesInUtero,
  ActionShort: SDE.ActionShort
}

define ScreeningImmunocompromisedLibraryAnalytics:
{
  CompletedAnnualCytologyTestSequence: SIC.CompletedAnnualCytologyTestSequence,
  DateOfLastCytology: ToString(SIC.DateOfLastCytology),
  LastCytologyWasCotest: SIC.LastCytologyWasCotest
}

define ScreeningSymptomaticLibraryAnalytics:
{
  IsSymptomatic: SSL.IsSymptomatic,
  HasNilmCytologyWithinLast12Months: SSL.HasNilmCytologyWithinLast12Months,
  HasCoincidentNilmCytologyAndNegativeHpvWitinLast3Years: SSL.HasCoincidentNilmCytologyAndNegativeHpvWitinLast3Years,
  HasVisibleCervicalOrVaginalLesion: SSL.HasVisibleCervicalOrVaginalLesion
}
//------------------------------------------------------------------------------
// Analytics Output
//------------------------------------------------------------------------------

define RunAnalytics:
  Analytics

define AnalyticsOutput:
  {
    DashboardLibrary: DashboardLibraryAnalytics,
    CollateManagementData: CollateManagementDataAnalytics,
    ManageCommonAbnormality: ManageCommonAbnormalityAnalytics,
    ManagementLibrary: ManagementLibraryAnalytics,
    ManageRareAbnormality: ManageRareAbnormalityAnalytics,
    ManageSpecialPopulation: ManageSpecialPopulationAnalytics,
    ScreeningLibrary: ScreeningLibraryAnalytics,
    ScreeningAverageRiskLibrary: ScreeningAverageRiskLibraryAnalytics,
    ScreeningDesExposureLibrary: ScreeningDesExposureLibraryAnalytics,
    ScreeningImmunocompromisedLibrary: ScreeningImmunocompromisedLibraryAnalytics,
    ScreeningSymptomaticLibrary: ScreeningSymptomaticLibraryAnalytics
  }
"
    },
    {
      "contentType": "application/elm+json",
      "data": "{
   "library" : {
      "annotation" : [ {
         "translatorVersion" : "2.4.0",
         "translatorOptions" : "",
         "type" : "CqlToElmInfo"
      } ],
      "identifier" : {
         "id" : "AnalyticsLibrary",
         "version" : "1.0.0"
      },
      "schemaIdentifier" : {
         "id" : "urn:hl7-org:elm",
         "version" : "r1"
      },
      "usings" : {
         "def" : [ {
            "localIdentifier" : "System",
            "uri" : "urn:hl7-org:elm-types:r1"
         }, {
            "localIdentifier" : "FHIR",
            "uri" : "http://hl7.org/fhir",
            "version" : "4.0.1"
         } ]
      },
      "includes" : {
         "def" : [ {
            "localIdentifier" : "Dash",
            "path" : "DashboardLibrary",
            "version" : "1.0.0"
         }, {
            "localIdentifier" : "CDM",
            "path" : "CollateManagementData",
            "version" : "1.1.0"
         }, {
            "localIdentifier" : "MCA",
            "path" : "ManageCommonAbnormality",
            "version" : "1.1.0"
         }, {
            "localIdentifier" : "Management",
            "path" : "ManagementLibrary",
            "version" : "1.0.0"
         }, {
            "localIdentifier" : "MRA",
            "path" : "ManageRareAbnormality",
            "version" : "1.1.0"
         }, {
            "localIdentifier" : "MSP",
            "path" : "ManageSpecialPopulation",
            "version" : "1.1.0"
         }, {
            "localIdentifier" : "Screening",
            "path" : "ScreeningLibrary",
            "version" : "1.0.0"
         }, {
            "localIdentifier" : "SAR",
            "path" : "ScreeningAverageRiskLibrary",
            "version" : "1.0.0"
         }, {
            "localIdentifier" : "SDE",
            "path" : "ScreeningDesExposureLibrary",
            "version" : "1.0.0"
         }, {
            "localIdentifier" : "SIC",
            "path" : "ScreeningImmunocompromisedLibrary",
            "version" : "1.0.0"
         }, {
            "localIdentifier" : "SSL",
            "path" : "ScreeningSymptomaticLibrary",
            "version" : "1.0.0"
         } ]
      },
      "parameters" : {
         "def" : [ {
            "name" : "Analytics",
            "accessLevel" : "Public",
            "default" : {
               "valueType" : "{urn:hl7-org:elm-types:r1}Boolean",
               "value" : "true",
               "type" : "Literal"
            }
         } ]
      },
      "contexts" : {
         "def" : [ {
            "name" : "Patient"
         } ]
      },
      "statements" : {
         "def" : [ {
            "name" : "Patient",
            "context" : "Patient",
            "expression" : {
               "type" : "SingletonFrom",
               "operand" : {
                  "dataType" : "{http://hl7.org/fhir}Patient",
                  "templateId" : "http://hl7.org/fhir/StructureDefinition/Patient",
                  "type" : "Retrieve"
               }
            }
         }, {
            "name" : "CollateManagementDataAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "MostRecentHpvResult",
                  "value" : {
                     "name" : "MostRecentHpvResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "SecondMostRecentHpvResult",
                  "value" : {
                     "name" : "SecondMostRecentHpvResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ThirdMostRecentHpvResult",
                  "value" : {
                     "name" : "ThirdMostRecentHpvResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "FourthMostRecentHpvResult",
                  "value" : {
                     "name" : "FourthMostRecentHpvResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentCytologyCotestResult",
                  "value" : {
                     "name" : "MostRecentCytologyCotestResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "SecondMostRecentCytologyCotestResult",
                  "value" : {
                     "name" : "SecondMostRecentCytologyCotestResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ThirdMostRecentCytologyCotestResult",
                  "value" : {
                     "name" : "ThirdMostRecentCytologyCotestResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "FourthMostRecentCytologyCotestResult",
                  "value" : {
                     "name" : "FourthMostRecentCytologyCotestResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentCytologyReportWasWithinPastFiveYears",
                  "value" : {
                     "name" : "MostRecentCytologyReportWasWithinPastFiveYears",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "CytologyInterpretedAsAscusOrAbove",
                  "value" : {
                     "name" : "CytologyInterpretedAsAscusOrAbove",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AnyCytologyInterpretedAsAscusOrAbove",
                  "value" : {
                     "name" : "AnyCytologyInterpretedAsAscusOrAbove",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentBiopsyResult",
                  "value" : {
                     "name" : "MostRecentBiopsyResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentBiopsyReportDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "MostRecentBiopsyReportDate",
                        "libraryName" : "CDM",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "ReferringHpvResult",
                  "value" : {
                     "name" : "ReferringHpvResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentCytologyBeforeBiopsy",
                  "value" : {
                     "name" : "MostRecentCytologyBeforeBiopsy",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ReferringCytologyResult",
                  "value" : {
                     "name" : "ReferringCytologyResult",
                     "libraryName" : "CDM",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "DateOfLastCervicalPrecancerTreatment",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfLastCervicalPrecancerTreatment",
                        "libraryName" : "CDM",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "MostRecentCytologyReportDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "MostRecentCytologyReportDate",
                        "libraryName" : "CDM",
                        "type" : "ExpressionRef"
                     }
                  }
               } ]
            }
         }, {
            "name" : "DashboardLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "PatientAge",
                  "value" : {
                     "name" : "PatientAge",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "TransgenderMale",
                  "value" : {
                     "name" : "TransgenderMale",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentPositiveHpv",
                  "value" : {
                     "name" : "HasRecentPositiveHpv",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentAbnormalCytologyResults",
                  "value" : {
                     "name" : "HasRecentAbnormalCytologyResults",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentRareCytologyResults",
                  "value" : {
                     "name" : "HasRecentRareCytologyResults",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentAbnormalScreening",
                  "value" : {
                     "name" : "HasRecentAbnormalScreening",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentAbnormalHistology",
                  "value" : {
                     "name" : "HasRecentAbnormalHistology",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "Immunocompromised",
                  "value" : {
                     "name" : "Immunocompromised",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentDistinctImmunocompromisedEvent",
                  "value" : {
                     "name" : "MostRecentDistinctImmunocompromisedEvent",
                     "libraryName" : "Dash",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentDistinctImmunocompromisedEventDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "MostRecentDistinctImmunocompromisedEventDate",
                        "libraryName" : "Dash",
                        "type" : "ExpressionRef"
                     }
                  }
               } ]
            }
         }, {
            "name" : "ManageCommonAbnormalityAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "HpvDates",
                  "value" : {
                     "type" : "Query",
                     "source" : [ {
                        "alias" : "H",
                        "expression" : {
                           "name" : "HpvDates",
                           "libraryName" : "MCA",
                           "type" : "ExpressionRef"
                        }
                     } ],
                     "relationship" : [ ],
                     "return" : {
                        "expression" : {
                           "type" : "ToString",
                           "operand" : {
                              "name" : "H",
                              "type" : "AliasRef"
                           }
                        }
                     }
                  }
               }, {
                  "name" : "CytologyAloneInRecentHistory",
                  "value" : {
                     "name" : "CytologyAloneInRecentHistory",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AbnormalCytologyAloneInRecentHistory",
                  "value" : {
                     "name" : "AbnormalCytologyAloneInRecentHistory",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "RarelyScreenedTreatmentRecommendation",
                  "value" : {
                     "name" : "RarelyScreenedTreatmentRecommendation",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "TableRecommendation",
                  "value" : {
                     "name" : "TableRecommendation",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "WhichTableMadeTheRecommendation",
                  "value" : {
                     "name" : "WhichTableMadeTheRecommendation",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentCytologyIsNotACotest",
                  "value" : {
                     "name" : "MostRecentCytologyIsNotACotest",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HpvInterpretedAsPositive",
                  "value" : {
                     "name" : "HpvInterpretedAsPositive",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "SecondMostRecentHpvInterpretedAsPositive",
                  "value" : {
                     "name" : "SecondMostRecentHpvInterpretedAsPositive",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "DateOfMostRecentPositiveScreeningResult",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfMostRecentPositiveScreeningResult",
                        "libraryName" : "MCA",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "DateOfMostRecentHpvReport",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfMostRecentHpvReport",
                        "libraryName" : "MCA",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "PositivePrimaryHpv",
                  "value" : {
                     "name" : "PositivePrimaryHpv",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HighRiskHPVPositiveResults",
                  "value" : {
                     "name" : "HighRiskHPVPositiveResults",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "PreviousCytologyOrSurveillanceIsOldOrAbsent",
                  "value" : {
                     "name" : "PreviousCytologyOrSurveillanceIsOldOrAbsent",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "IsRarelyScreenedPatient",
                  "value" : {
                     "name" : "IsRarelyScreenedPatient",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "RelevantRow",
                  "value" : {
                     "name" : "RelevantRow",
                     "libraryName" : "MCA",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ManagementLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "HasHighGradePreCancerCervicalLesion",
                  "value" : {
                     "name" : "HasHighGradePreCancerCervicalLesion",
                     "libraryName" : "Management",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasCervicalCancerDiagnoses",
                  "value" : {
                     "name" : "HasCervicalCancerDiagnoses",
                     "libraryName" : "Management",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "WhichRarityMadeTheRecommendation",
                  "value" : {
                     "name" : "WhichRarityMadeTheRecommendation",
                     "libraryName" : "Management",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ManagementRecommendation",
                  "value" : {
                     "name" : "ManagementRecommendation",
                     "libraryName" : "Management",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecommendation",
                  "value" : {
                     "name" : "HasRecommendation",
                     "libraryName" : "Management",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "DecisionAids",
                  "value" : {
                     "name" : "DecisionAids",
                     "libraryName" : "Management",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ManageRareAbnormalityAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "HasPositiveHpvAfterTreatmentForHighGradeResult",
                  "value" : {
                     "name" : "HasPositiveHpvAfterTreatmentForHighGradeResult",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasPremenopausalObservationOrCondition",
                  "value" : {
                     "name" : "HasPremenopausalObservationOrCondition",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasPostmenopausalObservationOrCondition",
                  "value" : {
                     "name" : "HasPostmenopausalObservationOrCondition",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AbsenceOrRemovalOfCervix",
                  "value" : {
                     "name" : "AbsenceOrRemovalOfCervix",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "CervixRemovalDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "CervixRemovalDate",
                        "libraryName" : "MRA",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "HasColposcopyProcedureAfterMostRecentBiopsy",
                  "value" : {
                     "name" : "HasColposcopyProcedureAfterMostRecentBiopsy",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasColposcopyProcedureAfterMostRecentTreatment",
                  "value" : {
                     "name" : "HasColposcopyProcedureAfterMostRecentTreatment",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "RecentlyRespondedYesToFuturePregnancyConcernsQuestion",
                  "value" : {
                     "name" : "RecentlyRespondedYesToFuturePregnancyConcernsQuestion",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "MostRecentTreatmentDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "MostRecentTreatmentDate",
                        "libraryName" : "MRA",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "HasTreatmentInLastYear",
                  "value" : {
                     "name" : "HasTreatmentInLastYear",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasTreatmentAfterMostRecentBiopsy",
                  "value" : {
                     "name" : "HasTreatmentAfterMostRecentBiopsy",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasSurveillanceAfterMostRecentBiopsy",
                  "value" : {
                     "name" : "HasSurveillanceAfterMostRecentBiopsy",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasPositiveSurveillanceAfterMostRecentBiopsy",
                  "value" : {
                     "name" : "HasPositiveSurveillanceAfterMostRecentBiopsy",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasHistologicHsilWithin12MonthsBeforeTreatment",
                  "value" : {
                     "name" : "HasHistologicHsilWithin12MonthsBeforeTreatment",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasTreatmentForHighGradeHistologyOrCytology",
                  "value" : {
                     "name" : "HasTreatmentForHighGradeHistologyOrCytology",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "TreatmentForHighGradeHistologyOrCytologyDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "TreatmentForHighGradeHistologyOrCytologyDate",
                        "libraryName" : "MRA",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "HasFirstNegativeSurveillanceTestAfterMostRecentBiopsy",
                  "value" : {
                     "name" : "HasFirstNegativeSurveillanceTestAfterMostRecentBiopsy",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasHistologyAfterTreatmentForHighGradeResult",
                  "value" : {
                     "name" : "HasHistologyAfterTreatmentForHighGradeResult",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "WhichRarityMadeTheRecommendation",
                  "value" : {
                     "name" : "WhichRarityMadeTheRecommendation",
                     "libraryName" : "MRA",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ManageSpecialPopulationAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "BiopsySinceMostRecentCytology",
                  "value" : {
                     "name" : "BiopsySinceMostRecentCytology",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "PregnancyOnset",
                  "value" : {
                     "name" : "PregnancyOnset",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HistologicAisDuringPregnancy",
                  "value" : {
                     "name" : "HistologicAisDuringPregnancy",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "TwoMostRecentCytologyReportsWithin18MonthsApart",
                  "value" : {
                     "name" : "TwoMostRecentCytologyReportsWithin18MonthsApart",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HighGradePreCancerCervicalLesionDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "path" : "date",
                        "type" : "Property",
                        "source" : {
                           "name" : "HighGradePreCancerCervicalLesionDate",
                           "libraryName" : "MSP",
                           "type" : "ExpressionRef"
                        }
                     }
                  }
               }, {
                  "name" : "CervicalCancerDiagnosisDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "path" : "date",
                        "type" : "Property",
                        "source" : {
                           "name" : "CervicalCancerDiagnosisDate",
                           "libraryName" : "MSP",
                           "type" : "ExpressionRef"
                        }
                     }
                  }
               }, {
                  "name" : "HighGradeOrCancerHistologyResultsDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "path" : "date",
                        "type" : "Property",
                        "source" : {
                           "name" : "HighGradeOrCancerHistologyResultsDate",
                           "libraryName" : "MSP",
                           "type" : "ExpressionRef"
                        }
                     }
                  }
               }, {
                  "name" : "HysterectomyPerformedForTreatment",
                  "value" : {
                     "name" : "HysterectomyPerformedForTreatment",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "InitialIntensiveSurveillancePeriodPostHysterectomy",
                  "value" : {
                     "name" : "InitialIntensiveSurveillancePeriodPostHysterectomy",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "WhichPopulationMadeTheRecommendation",
                  "value" : {
                     "name" : "WhichPopulationMadeTheRecommendation",
                     "libraryName" : "MSP",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ScreeningLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "HasHighGradePreCancerCervicalLesion",
                  "value" : {
                     "name" : "HasHighGradePreCancerCervicalLesion",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasCervicalCancerDiagnoses",
                  "value" : {
                     "name" : "HasCervicalCancerDiagnoses",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentAbnormalScreening",
                  "value" : {
                     "name" : "HasRecentAbnormalScreening",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecentAbnormalHistology",
                  "value" : {
                     "name" : "HasRecentAbnormalHistology",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "IsIncludedAndNotExcluded",
                  "value" : {
                     "name" : "IsIncludedAndNotExcluded",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasRecommendation",
                  "value" : {
                     "name" : "HasRecommendation",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "SuggestedOrders",
                  "value" : {
                     "name" : "SuggestedOrders",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "DecisionAids",
                  "value" : {
                     "name" : "DecisionAids",
                     "libraryName" : "Screening",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ScreeningAverageRiskLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "DateOfMostRecentNilmCytology",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfMostRecentNilmCytology",
                        "libraryName" : "SAR",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "DateOfMostRecentNegativeHpv",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfMostRecentNegativeHpv",
                        "libraryName" : "SAR",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "DateOfMostRecentNegativeCotest",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfMostRecentNegativeCotest",
                        "libraryName" : "SAR",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "LastScreeningType",
                  "value" : {
                     "name" : "LastScreeningType",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ProposedScreeningDate",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "ProposedScreeningDate",
                        "libraryName" : "SAR",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "RecommendImmediateCervicalCytology",
                  "value" : {
                     "name" : "RecommendImmediateCervicalCytology",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "RecommendImmediatePrimaryHpv",
                  "value" : {
                     "name" : "RecommendImmediatePrimaryHpv",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "RecommendImmediateCotesting",
                  "value" : {
                     "name" : "RecommendImmediateCotesting",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AbnormalResultInRecord",
                  "value" : {
                     "name" : "AbnormalResultInRecord",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AbsenceOrRemovalOfCervix",
                  "value" : {
                     "name" : "AbsenceOrRemovalOfCervix",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AbsenceOrRemovalOfCervixWithoutHistoryOfHighGradePrecancerOrCancer",
                  "value" : {
                     "name" : "AbsenceOrRemovalOfCervixWithoutHistoryOfHighGradePrecancerOrCancer",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "AdequatelyScreened",
                  "value" : {
                     "name" : "AdequatelyScreened",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasTwoNegativeHpvTestsForGradeD",
                  "value" : {
                     "name" : "HasTwoNegativeHpvTestsForGradeD",
                     "libraryName" : "SAR",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ScreeningDesExposureLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "WasExposedToDesInUtero",
                  "value" : {
                     "name" : "WasExposedToDesInUtero",
                     "libraryName" : "SDE",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ActionShort",
                  "value" : {
                     "name" : "ActionShort",
                     "libraryName" : "SDE",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ScreeningImmunocompromisedLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "CompletedAnnualCytologyTestSequence",
                  "value" : {
                     "name" : "CompletedAnnualCytologyTestSequence",
                     "libraryName" : "SIC",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "DateOfLastCytology",
                  "value" : {
                     "type" : "ToString",
                     "operand" : {
                        "name" : "DateOfLastCytology",
                        "libraryName" : "SIC",
                        "type" : "ExpressionRef"
                     }
                  }
               }, {
                  "name" : "LastCytologyWasCotest",
                  "value" : {
                     "name" : "LastCytologyWasCotest",
                     "libraryName" : "SIC",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "ScreeningSymptomaticLibraryAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "IsSymptomatic",
                  "value" : {
                     "name" : "IsSymptomatic",
                     "libraryName" : "SSL",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasNilmCytologyWithinLast12Months",
                  "value" : {
                     "name" : "HasNilmCytologyWithinLast12Months",
                     "libraryName" : "SSL",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasCoincidentNilmCytologyAndNegativeHpvWitinLast3Years",
                  "value" : {
                     "name" : "HasCoincidentNilmCytologyAndNegativeHpvWitinLast3Years",
                     "libraryName" : "SSL",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "HasVisibleCervicalOrVaginalLesion",
                  "value" : {
                     "name" : "HasVisibleCervicalOrVaginalLesion",
                     "libraryName" : "SSL",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         }, {
            "name" : "RunAnalytics",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "name" : "Analytics",
               "type" : "ParameterRef"
            }
         }, {
            "name" : "AnalyticsOutput",
            "context" : "Patient",
            "accessLevel" : "Public",
            "expression" : {
               "type" : "Tuple",
               "element" : [ {
                  "name" : "DashboardLibrary",
                  "value" : {
                     "name" : "DashboardLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "CollateManagementData",
                  "value" : {
                     "name" : "CollateManagementDataAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ManageCommonAbnormality",
                  "value" : {
                     "name" : "ManageCommonAbnormalityAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ManagementLibrary",
                  "value" : {
                     "name" : "ManagementLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ManageRareAbnormality",
                  "value" : {
                     "name" : "ManageRareAbnormalityAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ManageSpecialPopulation",
                  "value" : {
                     "name" : "ManageSpecialPopulationAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ScreeningLibrary",
                  "value" : {
                     "name" : "ScreeningLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ScreeningAverageRiskLibrary",
                  "value" : {
                     "name" : "ScreeningAverageRiskLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ScreeningDesExposureLibrary",
                  "value" : {
                     "name" : "ScreeningDesExposureLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ScreeningImmunocompromisedLibrary",
                  "value" : {
                     "name" : "ScreeningImmunocompromisedLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               }, {
                  "name" : "ScreeningSymptomaticLibrary",
                  "value" : {
                     "name" : "ScreeningSymptomaticLibraryAnalytics",
                     "type" : "ExpressionRef"
                  }
               } ]
            }
         } ]
      }
   }
}

"
    }
  ]
}